Source: activemq-cpp
Priority: extra
Maintainer: Cedric Vidal <cedric@vidal.biz>
Build-Depends: debhelper (>= 8.0.0), autotools-dev, libaprutil1-dev (>= 1.5.2), libapr1-dev (>= 1.4.6), dh-autoreconf
Standards-Version: 3.9.2
Section: libs
Homepage: http://activemq.apache.org/cms/
Vcs-Git: git://git.apache.org/activemq-cpp.git
Vcs-Browser: https://git-wip-us.apache.org/repos/asf?p=activemq-cpp.git

Package: activemq-cpp-dev
Section: libdevel
Architecture: any
Depends: activemq-cpp3 (= ${binary:Version})
Description: ActiveMQ CPP Library
 CMS (stands for C++ Messaging Service) is a JMS-like API for C++ for interfacing with Message Brokers such as Apache ActiveMQ. CMS helps to make your C++ client code much neater and easier to follow. To get a better feel for CMS try the API Reference. ActiveMQ-CPP is a client only library, a message broker such as Apache ActiveMQ is still needed for your clients to communicate.
 Our implementation of CMS is called ActiveMQ-CPP, which has an architecture that allows for pluggable transports and wire formats. Currently we support the OpenWire and Stomp protocols, both over TCP and SSL, we also now support a Failover Transport for more reliable client operation. In addition to CMS, ActiveMQ-CPP also provides a robust set of classes that support platform independent constructs such as threading, I/O, sockets, etc. You may find many of these utilities very useful, such as a Java like Thread class or the "synchronized" macro that let's you use a Java-like synchronization on any object that implements the activemq::concurrent::Synchronizable interface. ActiveMQ-CPP is released under the Apache 2.0 License

Package: activemq-cpp3
Section: libs
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: ActiveMQ CPP Library
 CMS (stands for C++ Messaging Service) is a JMS-like API for C++ for interfacing with Message Brokers such as Apache ActiveMQ. CMS helps to make your C++ client code much neater and easier to follow. To get a better feel for CMS try the API Reference. ActiveMQ-CPP is a client only library, a message broker such as Apache ActiveMQ is still needed for your clients to communicate.
 Our implementation of CMS is called ActiveMQ-CPP, which has an architecture that allows for pluggable transports and wire formats. Currently we support the OpenWire and Stomp protocols, both over TCP and SSL, we also now support a Failover Transport for more reliable client operation. In addition to CMS, ActiveMQ-CPP also provides a robust set of classes that support platform independent constructs such as threading, I/O, sockets, etc. You may find many of these utilities very useful, such as a Java like Thread class or the "synchronized" macro that let's you use a Java-like synchronization on any object that implements the activemq::concurrent::Synchronizable interface. ActiveMQ-CPP is released under the Apache 2.0 License

